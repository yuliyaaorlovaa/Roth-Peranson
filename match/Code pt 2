import random
import numpy as np
import scipy.stats as stats
import sys
from itertools import product

num_students = [50, 100, 200]
num_hospitals = [10, 20, 30]
num_locations = [2, 4, 5]
num_couples= [4, 5, 6]
sig_s = [0.2, 0.3, 0.5]
sig_h = [0.2, 0.3, 0.5]
num_slots_list=[4, 5, 6]
combinations = product(num_students, num_hospitals, num_locations, num_couples, sig_s, sig_h, num_slots_list)
for n_s, n_h, n_l, n_c, sigma_s, sigma_h, num_slots in combinations:
    print(f"n_s: {n_s}") 
    print(f"n_h: {n_h}")
    print(f"n_l: {n_l}")
    print(f"n_c: {n_c}")
    print(f"sigma_s {sigma_s}")
    print(f"sigma_h {sigma_h}")
    print(f"num_slots {num_slots}")
    n_ss=n_s-2*n_c
    
    rating_s = stats.norm(0,1).rvs(size = n_s)
    rating_h = stats.norm(0,1).rvs(size = n_h)
    location = stats.randint(0, n_l).rvs(size = n_h)

    epsilon_sh = stats.norm(0,1).rvs((n_s, n_h))
    epsilon_hs = stats.norm(0,1).rvs((n_h, n_s))
    epsilon_l = stats.norm(0,1).rvs((n_s, n_l))

    delta = stats.expon(scale=1).rvs(n_s)

    student_utility = rating_h + sigma_s * epsilon_sh + delta[:, None] * epsilon_l[:, location]
    hospital_utility = rating_s + sigma_h * epsilon_hs 

    ind_couple_utility = student_utility[:2*n_c]
    student_utility = student_utility[2*n_c:]

    student_rol= np.flip(np.argsort(student_utility, axis=1), axis=1)
    hospital_rol= np.flip(np.argsort(hospital_utility, axis=1), axis=1)

    names_h = np.array([f'H{i+1}' for i in range(n_h)])
    names_s = []
    for i in range(n_s):
        if i < 2*n_c:
            names_s.append(f'C{i+1}')
        else:
            names_s.append(f'S{i-2*n_c+1}')
    names_s = np.array(names_s)

    couples = {}
    partners = {}
    names_c = []
    for i in range(n_c):
        c1_name = names_s[2*i]
        c2_name = names_s[2*i+1]
        couple_name = f'C{2*i+1}{2*i+2}'
        names_c.append(couple_name)
        couples[couple_name] = [c1_name, c2_name]
        partners[c1_name] = c2_name
        partners[c2_name] = c1_name

    student_rol= {names_s[i+2*n_c]:list(names_h[student_rol[i]]) for i in range(n_ss)}
    hospital_rol= {names_h[i]:list(names_s[hospital_rol[i]]) for i in range(n_h)}

    couple_rol = {}
    for i in range(n_c):
        c1_utils = ind_couple_utility[2*i]
        c2_utils = ind_couple_utility[2*i+1]
        joint_util = np.add.outer(c1_utils, c2_utils)
        bonus=1
        recieves_bonus=np.equal.outer(location,location)
        couple_utility=joint_util+bonus*recieves_bonus
        joint_rol = np.transpose(np.flip(np.unravel_index(np.argsort(joint_util, axis=None), joint_util.shape), axis=1))
        joint_rol = names_h[joint_rol].tolist()
        couple_rol[names_c[i]] = joint_rol

    single_names = student_rol.keys()
    program_names = hospital_rol.keys()

    current_choices = {}
    applicant_stack = []
    program_stack = []
    num_slots =5

    def make_members(couples):
        member_of = {}
        for couple_name, members in couples.items():
            for s in members:
                member_of[s] = couple_name
        return member_of

    def match():
        for s in single_names:
            applicant_stack.append(s)
            make_stable()
        for c in names_c:
            applicant_stack.append(c)
            make_stable()
        return True


    def make_stable():
        while applicant_stack:
    #        print(f'applicant_stack={applicant_stack}, matches={matches}')
            s = applicant_stack.pop(0)
            if s in single_names:
                add_single(s)
            else:
                add_couple(s)
        if program_stack:
    #       print(f'program_stack={program_stack}, matches={matches}')
            program = program_stack.pop(0)
            while matches['no match']:
                s = matches['no match'].pop()
                reset(s)
            deal_with(program)
            random.shuffle(applicant_stack)
            make_stable()


    def deal_with(p):
        for program, students in matches.items():
            if program == p:
                next
            for s in students:
                if s in member_of:
                    c = member_of[s]
                    deal_with_couple(c, p)
                elif mutually_prefer(p, s, program):
                    reset(s)


    def reset(s):
        print(f'resetting {s}')
        withdraw(s)
        applicant_stack.append(s)
        current_choices[s] = 0


    def deal_with_couple(c, p):
        c_ind = choice_index(c)
        for i in range(c_ind):
            prefs = couple_rol[c][i]
            if p in prefs and is_couple_preferred(c, prefs):
                reset(c)
                return

    def mutually_prefer(p, student, current_program):
        prefs = get_preferences(student)
        if current_program == 'no match':
            student_prefers = True
        else:
            student_prefers =  prefs.index(p) < prefs.index(current_program)
        return is_preferred(student, p) and student_prefers

    def get_preferences(s):
        if s in single_names:
            return student_rol[s]
        elif s in names_c:
            return couple_rol[s]
        else:
            couple = member_of[s]
            ind = couples[couple].index(s)
            return [pref[ind] for pref in couple_rol[couple]]

    def get_matched_program(s):
        for program, students in matches.items():
            if s in students:
                return program
        return None

    def add_single(s):
        if not has_options(s):
            matches['no match'].append(s)
            return False
        program = student_rol[s][choice_index(s)]
        if is_preferred(s, program):
    #        print(f'{program} prefers {s}')
            accept(s, program)
        else:
    #        print(f'{s} is moving on')
            move_on(s)

    def add_couple(c):
        if not has_options(c):
            matches['no match'].append(c)
            return False
        return couple_propose(c)

    def couple_propose(c):
        prefs = couple_rol[c][choice_index(c)]
        pref1, pref2 = prefs
        c1, c2 = couples[c]
        if is_couple_preferred(c, prefs):
            print(f'{pref1} and {pref2} prefer {c1} and {c2}')
            accept(c1, pref1)
            accept(c2, pref2)
        else:
            print(f'{c1}, {c2} are moving on')
            move_on(c)

    def move_on(s):
        if s in single_names:
            current_choices[s] += 1
            applicant_stack.append(s)
        elif s in names_c:
            current_choices[s] += 1
            applicant_stack.append(s)
        else:
            couple = member_of[s]
            partner = partners[s]
            withdraw(partner)
            move_on(couple)

    def withdraw(s):
        program = get_matched_program(s)
        if program:
            matches[program].remove(s)
            if program != 'no match':
                program_stack.append(program)
        if s in member_of:
            partner = partners[s]
            program = get_matched_program(partner)
            if program:
                matches[program].remove(partner)
                if program != 'no match':
                    program_stack.append(program)

    def is_couple_preferred(c, programs):
        pref1, pref2 = programs
        c1, c2 = couples[c]
        if pref1 == pref2:
            if num_slots < 2:
                return False
            prog_prefs = hospital_rol[pref1]
            if prog_prefs.index(c1) < prog_prefs.index(c2):
                oc1, oc2 = c1, c2
            else:
                oc1, oc2 = c2, c1
            current_matches = matches[pref1]
            if len(current_matches) <= num_slots - 2:
                return True
            elif len(current_matches) == num_slots - 1:
                return prog_prefs.index(oc2) < prog_prefs.index(current_matches[-1])
            else:
                return prog_prefs.index(oc2) < prog_prefs.index(current_matches[-2])
        else:
            return is_preferred(c1, pref1) and is_preferred(c2, pref2)

    def is_preferred(s, program):
        if len(matches[program]) < num_slots:
            return True
        else:
            current_match = matches[program][-1]
            prefs = hospital_rol[program]
            return prefs.index(s) < prefs.index(current_match)

    def accept(s, program):
        if len(matches[program])==num_slots:
            current_match = matches[program][-1]
            matches[program].remove(current_match)
            move_on(current_match)
        matches[program].append(s)
        sort_matches(program)

    def sort_matches(program):
        prefs = hospital_rol[program]
        matches[program].sort(key=lambda s: prefs.index(s))

    def has_options(s):
        if s in single_names:
            choice=choice_index(s)
            student_list=len(student_rol[s])
            return choice_index(s) < len(student_rol[s])
        else:
            return choice_index(s) < len(couple_rol[s])


    def choice_index(s):
        if s not in current_choices:
            current_choices[s] = 0
        return current_choices[s]

    member_of = make_members(couples)
    matches = {p: [] for p in (list(program_names) + ['no match'])}

    match()
    print(f'matches={matches}')